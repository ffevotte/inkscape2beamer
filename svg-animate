#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""Convert an SVG image into one PDF per layer.

This helps generating Beamer animations by adding one layer at a time
(incremental animation) or displaying one layer after the other (sequential
animation).
"""

import sys
import subprocess
from xml.dom import minidom
from optparse import OptionParser

class Layer:
    frame = 0

    def parseLabel(self, label):
        val = label.split("|")
        steps = ""
        zorder = ""

        if len(val) == 1:
            name = val[0]
        elif len(val) == 2:
            steps = val[0]
            name = val[1]
        else:
            steps = val[0]
            zorder = val[1]
            name = val[2]

        return (steps, zorder, name)


    def absStep(self, relStep):
        if relStep.startswith("+"):
            return str(Layer.frame + int(relStep))
        else:
            return relStep


    def parseSteps(self, steps):
        if steps == "":
            steps = "+1:"

        v = steps.split(":")
        if len(v) > 1:
            begin = v[0]
            end   = v[1]
        else:
            begin = steps
            end   = "+0"

        begin = self.absStep(begin)
        Layer.frame = int(begin)
        end   = self.absStep(end)

        return "%s-%s" % (begin, end)


    def __init__(self, layerId, label):
        self.layerId = layerId

        (steps, zorder, name) = self.parseLabel(label)

        self.steps  = self.parseSteps(steps)

        if zorder == "":
            zorder = "10"
        self.zorder = int(zorder)

        self.name = sanitize(name)


    def __str__(self):
        return "%-10s %3d  %-6s %s" % (self.layerId, self.zorder, self.steps, self.name)

def getLayers(svgFile):
    "Get a list of SVG layers"

    svgXML = minidom.parse (svgFile)
    elements = svgXML.getElementsByTagName ("g")
    res = {}

    sys.stderr.write("Collecting layers...\n")
    sys.stderr.write("  %-10s %3s  %-6s %s\n" % ("Id", "Z", "Steps", "Name"))
    sys.stderr.write("  " + "-"*38 + "\n")
    for element in elements:
        dic = {}
        for i in element.attributes.keys():
            dic[str(i)] = str(element.attributes[i].value)

        if (dic.has_key ("inkscape:groupmode")
            and dic["inkscape:groupmode"] == 'layer'):
            layer = Layer(dic["id"], dic["inkscape:label"])
            sys.stderr.write("  %s\n" % layer)

            z = layer.zorder
            if z not in res:
                res[z] = []
            res[z].append(layer)

    return res

def exportLayer(svgFile, layerId, pdfOutput):
    "Export a layer to pdf"

    sys.stderr.write ("  %-33s" % (pdfOutput + "..."))
    p = subprocess.Popen (["inkscape", "--without-gui",
                           "--export-area-page",
                           "--export-id-only",
                           "--export-id=%s"  % layerId,
                           "--export-pdf=%s" % pdfOutput,
                           svgFile])
    p.wait()
    sys.stderr.write (" done\n")

def sanitize(name):
    "Sanitize a layer name to get a reasonable file name"
    res = name.replace (" ", "_")
    res = res.replace (".", "_")
    return res

def logGeneration(name):
    sys.stderr.write ("  %-33s" % (name + "..."))

def writeTex(svgFile, suffix, preamble, contents):
    out = svgFile.replace(".svg", suffix)
    logGeneration(out)
    with open (out, "w") as texFile:
        texFile.write ("\n".join(preamble))
        texFile.write ("\n")
        texFile.write ("\n".join(contents))
        texFile.write ("\n")
    sys.stderr.write (" done\n")

TEST_TEMPLATE = r"""
\documentclass{beamer}
\usepackage{tikz}
\begin{document}
\begin{frame}
  \def\figPath{.}
  \def\figWidth{\linewidth}
  \input{%s.tex}
\end{frame}
\end{document}
"""

def generate(options):
    "Export SVG layers to PDF frames & generate LaTeX files."

    svgInput = options.svgInput
    baseName = svgInput.replace(".svg", "")

    layers = getLayers(svgInput)

    sys.stderr.write("\nGenerating PDF frames:\n")

    tex = [r"%% generated with %s" % str(sys.argv),
           r"\begin{tikzpicture}"]
    texTemplate = r"\only<%s>{\draw(0,0)node{\includegraphics[width=\figWidth]{\figPath/%s}}};"
    for z in sorted(layers.keys()):
        if z == 0:
            continue

        for layer in layers[z]:
            pdfOutput = "%s_%s.pdf" % (baseName, layer.name)
            exportLayer(svgInput, layer.layerId, pdfOutput)

            tex.append (texTemplate % (layer.steps, pdfOutput))
    tex.append(r"\end{tikzpicture}")

    sys.stderr.write("Generating LaTeX files:\n")

    texFile = "%s.tex" % baseName
    logGeneration(texFile)
    with open (texFile, "w") as texFile:
        texFile.write ("\n".join(tex))
        texFile.write ("\n")
    sys.stderr.write(" done\n")

    texFile = "%s-test.tex" % baseName
    logGeneration(texFile)
    with open(texFile, "w") as f:
        f.write(TEST_TEMPLATE % baseName)
    sys.stderr.write(" done\n")

def main ():
    "Entry point"
    parser = OptionParser()

    (options, args) = parser.parse_args()
    if len(args) < 1:
        sys.stderr.write ("Not enough arguments\n")
        parser.print_help()
    else:
        options.svgInput = args[0]
        generate (options)

if __name__ == "__main__":
    main ()
