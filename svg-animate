#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""Convert an SVG image into one PDF per layer.

This helps generating Beamer animations by adding one layer at a time
(incremental animation) or displaying one layer after the other (sequential
animation).
"""

import sys
import subprocess
from xml.dom import minidom
from optparse import OptionParser

def getLayers(svgFile):
    "Get a list of SVG layers"

    svgXML = minidom.parse (svgFile)
    elements = svgXML.getElementsByTagName ("g")
    res = []

    sys.stderr.write("Collecting layers...\n")
    sys.stderr.write("  %-15s -> %s\n" % ("Layer id", "Name"))
    sys.stderr.write("  " + "-"*38 + "\n")
    for element in elements:
        dic = {}
        for i in element.attributes.keys():
            dic[str(i)] = str(element.attributes[i].value)

        if (dic.has_key ("inkscape:groupmode")
            and dic["inkscape:groupmode"] == 'layer'):
            res += [(dic["id"], dic["inkscape:label"])]
            sys.stderr.write("  %-15s -> %s\n" % (dic["id"], dic["inkscape:label"]))

    return res

def exportLayer(svgFile, layerId, pdfOutput):
    "Export a layer to pdf"

    sys.stderr.write ("  %-33s" % (pdfOutput + "..."))
    p = subprocess.Popen (["inkscape", "--without-gui",
                           "--export-area-page",
                           "--export-id-only",
                           "--export-id=%s"  % layerId,
                           "--export-pdf=%s" % pdfOutput,
                           svgFile])
    p.wait()
    sys.stderr.write (" done\n")

def sanitize(name):
    "Sanitize a layer name to get a reasonable file name"
    res = name.replace (" ", "_")
    res = res.replace (".", "_")
    return res

def writeTex(svgFile, suffix, preamble, contents):
    out = svgFile.replace(".svg", suffix)
    sys.stderr.write ("  %-33s" % (out + "..."))
    with open (out, "w") as texFile:
        texFile.write ("\n".join(preamble))
        texFile.write ("\n")
        texFile.write ("\n".join(contents))
        texFile.write ("\n")
    sys.stderr.write (" done\n")

def generateFrames(options):
    """Export SVG layers to PDF frames.

Also produce template LaTeX files to generate sequential and incremental Beamer
animations from the frames."""
    svgInput = options.svgInput
    figPath  = options.path
    figWidth = options.width

    texPreamble = []
    texPreamble.append (r"%% generated with `%s'" % str(sys.argv))

    texSeq = []
    texInc = [r"\begin{tikzpicture}"]

    texSeqTmpl = r"\includegraphics<%d>[width=\figWidth]{\figPath/%s}"
    texIncTmpl = r"\only<%d->{\draw(0,0)node{\includegraphics[width=\figWidth]{\figPath/%s}}};"

    layers = getLayers(svgInput)

    sys.stderr.write("\nGenerating frames:\n")
    for index in xrange(len(layers)):
        (layerId, layerName) = layers[index]

        pdfOutput = svgInput.replace(".svg", "_%s.pdf" % sanitize(layerName))
        exportLayer(svgInput, layerId, pdfOutput)

        texSeq.append (texSeqTmpl % (index+1, pdfOutput))
        texInc.append (texIncTmpl % (index+1, pdfOutput))
    texInc.append(r"\end{tikzpicture}")

    sys.stderr.write("\nGenerating TeX templates:\n")
    writeTex(svgInput, "-seq.tex", texPreamble, texSeq)
    writeTex(svgInput, "-inc.tex", texPreamble, texInc)

def generateTex(options):
    baseName = options.svgInput.replace(".svg", "")
    texName = baseName+"-test.tex"

    sys.stderr.write("  %-33s" % (texName + "..."))
    with open(texName, "w") as f:
        f.write(r"""
        \documentclass{beamer}
        \usepackage{tikz}
        \begin{document}
        \begin{frame}
          \def\figPath{%s}
          \def\figWidth{%s}
          \input{%s-%s}
        \end{frame}
        \end{document}
        """ % (
            options.path,
            options.width,
            baseName, options.anim))
    sys.stderr.write(" done\n")

def main ():
    "Entry point"
    parser = OptionParser()
    parser.add_option(
        "-p", "--path", dest = "path",
        help    = "prepend figures names with PATH for inclusion in LaTeX",
        default = ".")
    parser.add_option(
        "-w", "--width", dest = "width",
        help    = "set the figure width",
        default = r"\linewidth")
    parser.add_option(
        "-a", "--anim", dest = "anim",
        help    = "set the animation style",
        default = "seq",
        metavar = "[seq|inc|CUSTOM_NAME]"
    )

    (options, args) = parser.parse_args()
    if len(args) < 1:
        sys.stderr.write ("Not enough arguments\n")
        parser.print_help()
    else:
        options.svgInput = args[0]
        generateFrames (options)
        generateTex    (options)

if __name__ == "__main__":
    main ()
